#!/usr/bin/env php
<?php

use Webapp\Shell\Helpers\Console;
use Webapp\Shell\GitReference;
use Webapp\Shell\Helpers\Permission;
use Webapp\Shell\Helpers\Project;
use Webapp\Shell\Helpers\Key;

/**
 * 
 */
class hook_file
{
    public static function hooks()
    {
        return dirname(__DIR__);
    }
}

/**
 * Main hook configure
 */
$baseDir = hook_file::hooks();
require_once $baseDir . '/vendor/autoload.php';
require_once $baseDir . '/config/shell.php';

/**
 * For testing
 */
//  $_SERVER['argv'][1] = 'refs/heads/master';
//  $_SERVER['SSH_ORIGINAL_COMMAND'] = "git-receive-pack '~/may/hello-world-project.git'";
//  $_SERVER['GC_ID'] = 1;

$ref = new GitReference();

$ref->setRefs($_SERVER['argv'][1])
    ->setSshCommand($_SERVER['SSH_ORIGINAL_COMMAND'])
    ->setKeyId($_SERVER['GC_ID']);

$permission = new Permission();
$project = new Project($ref);
$key = new Key($ref);

Console::print('Running Hook in ' . hook_file::hooks() . '/hooks');
Console::print('Running Update Hook');
Console::print('Project: ' . $project->get()->data->name);
Console::print('Project owner: ' . $project->get()->user_id);
Console::print('Key ID: ' . $ref->getKeyId());
Console::print('Key owner: ' . $key->getOwner());

//Show Ref
Console::print('Ref: '. $ref->getRefs());

// Just for log
//print_r($_SERVER);

// check if user is allowed to push to branches
$permission->isAllowedToPush($project);

// Send information when hook is done
Console::print('Hook Done');